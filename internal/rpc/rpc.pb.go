// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package rpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddIntMessage struct {
	A                    int32    `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B                    int32    `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddIntMessage) Reset()         { *m = AddIntMessage{} }
func (m *AddIntMessage) String() string { return proto.CompactTextString(m) }
func (*AddIntMessage) ProtoMessage()    {}
func (*AddIntMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *AddIntMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddIntMessage.Unmarshal(m, b)
}
func (m *AddIntMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddIntMessage.Marshal(b, m, deterministic)
}
func (m *AddIntMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddIntMessage.Merge(m, src)
}
func (m *AddIntMessage) XXX_Size() int {
	return xxx_messageInfo_AddIntMessage.Size(m)
}
func (m *AddIntMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AddIntMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AddIntMessage proto.InternalMessageInfo

func (m *AddIntMessage) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *AddIntMessage) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type AddIntReply struct {
	C                    int32    `protobuf:"varint,1,opt,name=c,proto3" json:"c,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddIntReply) Reset()         { *m = AddIntReply{} }
func (m *AddIntReply) String() string { return proto.CompactTextString(m) }
func (*AddIntReply) ProtoMessage()    {}
func (*AddIntReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *AddIntReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddIntReply.Unmarshal(m, b)
}
func (m *AddIntReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddIntReply.Marshal(b, m, deterministic)
}
func (m *AddIntReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddIntReply.Merge(m, src)
}
func (m *AddIntReply) XXX_Size() int {
	return xxx_messageInfo_AddIntReply.Size(m)
}
func (m *AddIntReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AddIntReply.DiscardUnknown(m)
}

var xxx_messageInfo_AddIntReply proto.InternalMessageInfo

func (m *AddIntReply) GetC() int32 {
	if m != nil {
		return m.C
	}
	return 0
}

func init() {
	proto.RegisterType((*AddIntMessage)(nil), "AddIntMessage")
	proto.RegisterType((*AddIntReply)(nil), "AddIntReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestSvcClient is the client API for TestSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestSvcClient interface {
	Add(ctx context.Context, in *AddIntMessage, opts ...grpc.CallOption) (*AddIntReply, error)
}

type testSvcClient struct {
	cc *grpc.ClientConn
}

func NewTestSvcClient(cc *grpc.ClientConn) TestSvcClient {
	return &testSvcClient{cc}
}

func (c *testSvcClient) Add(ctx context.Context, in *AddIntMessage, opts ...grpc.CallOption) (*AddIntReply, error) {
	out := new(AddIntReply)
	err := c.cc.Invoke(ctx, "/TestSvc/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestSvcServer is the server API for TestSvc service.
type TestSvcServer interface {
	Add(context.Context, *AddIntMessage) (*AddIntReply, error)
}

func RegisterTestSvcServer(s *grpc.Server, srv TestSvcServer) {
	s.RegisterService(&_TestSvc_serviceDesc, srv)
}

func _TestSvc_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIntMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestSvcServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TestSvc/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestSvcServer).Add(ctx, req.(*AddIntMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TestSvc",
	HandlerType: (*TestSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _TestSvc_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 126 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xd2, 0xe6, 0xe2, 0x75, 0x4c, 0x49, 0xf1, 0xcc, 0x2b, 0xf1,
	0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0xe2, 0xe1, 0x62, 0x4c, 0x94, 0x60, 0x54, 0x60, 0xd4,
	0x60, 0x0d, 0x62, 0x4c, 0x04, 0xf1, 0x92, 0x24, 0x98, 0x20, 0xbc, 0x24, 0x25, 0x69, 0x2e, 0x6e,
	0x88, 0xe2, 0xa0, 0xd4, 0x82, 0x9c, 0x4a, 0x90, 0x64, 0x32, 0x4c, 0x69, 0xb2, 0x91, 0x01, 0x17,
	0x7b, 0x48, 0x6a, 0x71, 0x49, 0x70, 0x59, 0xb2, 0x90, 0x2a, 0x17, 0xb3, 0x63, 0x4a, 0x8a, 0x10,
	0x9f, 0x1e, 0x8a, 0xd1, 0x52, 0x3c, 0x7a, 0x48, 0xba, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x4e, 0x30,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x32, 0x3d, 0xde, 0x9d, 0x8f, 0x00, 0x00, 0x00,
}
